import pandas as pd
from torch.utils.data import Dataset, DataLoader

class dotdict(dict):
    """dot.notation access to dictionary attributes"""
    __getattr__ = dict.get
    __setattr__ = dict.__setitem__
    __delattr__ = dict.__delitem__


def generate_from_sentences(text, model, tokenizer,device,do_sample):
    text=[tokenizer.eos_token +  i + tokenizer.eos_token for i in text]
    batch=tokenizer(text, padding=True, return_tensors="pt")

    input_ids = batch["input_ids"].to(device)
    attention_mask = batch["attention_mask"].to(device)
    #token_type_ids = batch['token_type_ids'].to(device)

    # Set token type IDs for the prompts
    max_prompt_length=50
    # token_type_ids[attention_mask == 0]=1
    #prompts_token_type_ids = torch.ones(token_type_ids.shape[0],max_prompt_length, dtype=torch.long).to(device)
    ##Extend token_type_ids to cover the prompt segment
    #token_type_ids = torch.cat((token_type_ids, prompts_token_type_ids),dim=-1)

    # token_type_ids = torch.tensor(
    #     [[0] * input_ids.shape[1] + [1] * max_prompt_length for _ in range(input_ids.shape[0])]).to(device)
    # labels = input_ids.clone()
    #pred_caps_1=gen(model, batch,tokenizer)
    max_length=input_ids.shape[1] + max_prompt_length
    generated_ids = model.generate(input_ids=input_ids,attention_mask=attention_mask, max_length=max_length, do_sample=do_sample)
    #generated_ids = model.generate(input_ids=input_ids, attention_mask=attention_mask,
                                  # token_type_ids=token_type_ids, max_length=max_length)
    pred_caps = tokenizer.batch_decode(generated_ids, skip_special_tokens=True)

    # for prompt in pred_caps:
    #     print(prompt)
    #     print('\n')

    return pred_caps

def get_image(prompt, text2img, img2img,**kwargs):
    f = text2img if kwargs.get('image') is None else img2img
    n_retries = 5
    while n_retries > 0:
        n_retries-=1
        result = f(prompt, **kwargs)
        if not any(result.nsfw_content_detected):
            return result.images
        else:
            print(f"nsfw content detectected. retries remaining: {n_retries}")

def get_image_for_prompt(*args, **kargs):
    if 'init_image' in kargs:
        kargs['image'] = kargs.pop('init_image')
    if 'start_schedule' in kargs:
        kargs['strength'] = kargs.pop('start_schedule')
    return get_image(*args, **kargs)

def get_variations_w_init(prompt, init_image, **kargs):
    return list(get_image_for_prompt(prompt=prompt, init_image=init_image, **kargs))

def get_close_variations_from_prompt(prompt, n_variations=2, image_consistency=.7):
    """
    prompt: a text prompt
    n_variations: total number of images to return
    image_consistency: float in [0,1], controls similarity between images generated by the prompt.
                        you can think of this as controlling how much "visual vibration" there will be.
                        - 0=regenerate each iandely identical
    """
    images = list(get_image_for_prompt(prompt))
    for _ in range(n_variations - 1):
        img = get_variations_w_init(prompt, images[0], start_schedule=(1-image_consistency))[0]
        images.append(img)
    return images